<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Quant UX researcher&#39;s blog</title>
<link>https://wowone.github.io/</link>
<atom:link href="https://wowone.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Vladimir Kukushkin&#39;s personal space</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Sun, 10 Nov 2024 23:00:00 GMT</lastBuildDate>
<item>
  <title>Modeling DAU with Markov chain (WIP)</title>
  <link>https://wowone.github.io/posts/2024-11-01_dau_prediction/dau_prediction.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">1. Introduction</h2>
<p>Doubtlessly, DAU, WAU, and MAU are critical business metrics. An article <a href="https://www.lennysnewsletter.com/p/how-duolingo-reignited-user-growth">“How Duolingo reignited user growth”</a> by <a href="https://www.linkedin.com/in/jorgemazal/">Jorge Mazal</a>, former CPO of Duolingo is #1 the Growth section of Lenny’s Newsletter blog. In this article Jorge payed special attention to the methodology Duolingo used to model DAU metrics (see another article <a href="https://blog.duolingo.com/growth-model-duolingo/">“Meaningful metrics: how data sharpened the focus of product teams”</a> by <a href="https://blog.duolingo.com/author/erin/">Erin Gustafson</a>). This methodology has multiple strenghts but I focus here on how one can use it for DAU forecasting.</p>
<p>New year is coming soon, so many companies are planning their budgets for the next year these days. Cost estimations are often require DAU forecast. In this article I’ll show you how you can get this prediction using the Duolingo’s growth model and share a DAU &amp; MAU “calculator” designed as a Google Spreadsheet calculator.</p>
</section>
<section id="methodology" class="level2">
<h2 class="anchored" data-anchor-id="methodology">2. Methodology</h2>
<p>A quick recap on how the <a href="https://blog.duolingo.com/growth-model-duolingo/">Duolingo’s growth model</a> works. At day <img src="https://latex.codecogs.com/png.latex?d"> (<img src="https://latex.codecogs.com/png.latex?d=1,2,%5Cldots,">) of a user’s lifetime the user can be in one of the following 7 (mutually-exclusive) states:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>
state
</th>
<th width="120">
d = 1
</th>
<th width="120">
active<br>today
</th>
<th width="120">
active in<br>[d-6, d-1]
</th>
<th width="120">
active in<br>[d-29, d-7]
</th>
<th width="150">
active<br>before d-30
</th>
</tr>
</thead>
<tbody><tr>
<td>
new
</td>
<td>
✅
</td>
<td>
?
</td>
<td>
NA
</td>
<td>
NA
</td>
<td>
NA
</td>
</tr>
<tr>
<td>
current
</td>
<td>
❌
</td>
<td>
✅
</td>
<td>
✅
</td>
<td>
❓
</td>
<td>
❓
</td>
</tr>
<tr>
<td>
reactivated
</td>
<td>
❌
</td>
<td>
✅
</td>
<td>
❌
</td>
<td>
✅
</td>
<td>
?
</td>
</tr>
<tr>
<td>
resurrected
</td>
<td>
❌
</td>
<td>
✅
</td>
<td>
❌
</td>
<td>
❌
</td>
<td>
✅
</td>
</tr>
<tr>
<td>
at_risk_wau
</td>
<td>
❌
</td>
<td>
❌
</td>
<td>
✅
</td>
<td>
?
</td>
<td>
?
</td>
</tr>
<tr>
<td>
at_risk_mau
</td>
<td>
❌
</td>
<td>
❌
</td>
<td>
❌
</td>
<td>
✅
</td>
<td>
?
</td>
</tr>
<tr>
<td>
dormant
</td>
<td>
❌
</td>
<td>
❌
</td>
<td>
❌
</td>
<td>
❌
</td>
<td>
✅
</td>
</tr>
</tbody></table>
<p>Having these states defined (as set <img src="https://latex.codecogs.com/png.latex?S">), we can consider a user’s lifetime trajectory as a Markov chain. Let <img src="https://latex.codecogs.com/png.latex?M"> be a transition matrix associated with this Markov chain: <img src="https://latex.codecogs.com/png.latex?m_%7Bi,%20j%7D%20=%20P(s_j%20%7C%20s_i)"> are the probabilities that a user moves to state <img src="https://latex.codecogs.com/png.latex?s_j"> right after being at state <img src="https://latex.codecogs.com/png.latex?s_i">, <img src="https://latex.codecogs.com/png.latex?s_i,%20s_j%20%5Cin%20S">. The matrix values are easily fetched from the historical data.</p>
<p>If we assume that the user behavior is stationary, the matrix <img src="https://latex.codecogs.com/png.latex?M"> fully describes states of the all users in the future. Suppose that vector <img src="https://latex.codecogs.com/png.latex?u_0"> of length 7 contains the counts of users being in certain states at some calendar day denoted as 0. Thus, according to the Markov model, in the next day <img src="https://latex.codecogs.com/png.latex?u_1"> we expect to have the following amount of users:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cunderbrace%7B%0A%5Cbegin%7Bpmatrix%7D%20%20%5C#New_1%20%5C%5C%20%5C#Current_1%20%5C%5C%20%5C#Reactivated_1%20%5C%5C%20%5C#Resurrected_1%20%5C%5C%20%5C#AtRiskWau_1%20%5C%5C%20%5C#AtRiskMau_1%20%5C%5C%20%5C#Dormant_1%20%5Cend%7Bpmatrix%7D%0A%7D_%7Bu_1%7D%20=%20M%5ET%20%5Ccdot%0A%5Cunderbrace%7B%0A%5Cbegin%7Bpmatrix%7D%20%20%5C#New_0%20%5C%5C%20%5C#Current_0%20%5C%5C%20%5C#Reactivated_0%20%5C%5C%20%5C#Resurrected_0%20%5C%5C%20%5C#AtRiskWau_0%20%5C%5C%20%5C#AtRiskMau_0%20%5C%5C%20%5C#Dormant_0%20%5Cend%7Bpmatrix%7D%0A%7D_%7Bu_0%7D%0A"></p>
<p>Applying this formula recursevely, we derive the amount of the users at any arbitrary day <img src="https://latex.codecogs.com/png.latex?t%20%3E%200"> in the future. The only thing we need to provide despite of the initial distribution <img src="https://latex.codecogs.com/png.latex?u_0"> is to the amount of new users that would appear in the product each day in the future. We’ll get it by using historical data on new users appeared in the past and appyling the <a href="http://facebook.github.io/prophet/">prophet</a> library.</p>
<p>Now, having <img src="https://latex.codecogs.com/png.latex?u_t"> calculated, we can calculate DAU values at day t: <img src="https://latex.codecogs.com/png.latex?DAU_t%20=%20%5C#New_t%20+%20%5C#Current_t%20+%20%5C#Reactivated_t%20+%5C#Resurrected_t."></p>
<p>Additionally, we can easily calculate WAU and MAU metrics: <img src="https://latex.codecogs.com/png.latex?WAU_t%20=%20DAU_t%20+%5C#AtRiskWau_t,"> <img src="https://latex.codecogs.com/png.latex?MAU_t%20=%20DAU_t%20+%5C#AtRiskWau_t%20+%20%5C#AtRiskMau_t."></p>
<p>Finally, the algorithm looks like this:</p>
<ol type="1">
<li>For each prediction day <img src="https://latex.codecogs.com/png.latex?t=1,%20...,%20T"> calculate the expected amount of new users <img src="https://latex.codecogs.com/png.latex?%5C#New_1,%20%5Cldots,%20%5C#New_T">.</li>
<li>For each lifetime day of each user define on of the 7 states.</li>
<li>Calculate the transition matrix <img src="https://latex.codecogs.com/png.latex?M">.</li>
<li>Calculate initial counts <img src="https://latex.codecogs.com/png.latex?u_0"> corresponding to <img src="https://latex.codecogs.com/png.latex?t=0"> day.</li>
<li>Calculate recursively <img src="https://latex.codecogs.com/png.latex?u_%7Bt+1%7D%20=%20M%5ET%20u_t">.</li>
<li>Calculate DAU, WAU, MAU for each prediction day <img src="https://latex.codecogs.com/png.latex?t=1,%20...,%20T">.</li>
</ol>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">3. Implementation</h2>
<section id="dataset" class="level3">
<h3 class="anchored" data-anchor-id="dataset">3.1 Dataset</h3>
<p>We use a simulated dataset based on historical data of a SAAS app. The data is stored in the <code>dau_data.csv.gz</code> file and contains three columns: <code>user_id</code>, <code>date</code>, and <code>registration_date</code>. Each record indicates a day when a user was active.</p>
<p>The data includes activity indicators for all users from <code>2020-11-01</code> to <code>2023-10-31</code>. An additional month, October 2020, is included to calculate user states correctly (<code>at_risk_mau</code> and <code>dormant</code> states require data from one month prior).</p>
<div id="d8e524c5" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"></span>
<span id="cb1-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau_data.csv.gz'</span>, compression<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gzip'</span>)</span>
<span id="cb1-4">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>])</span>
<span id="cb1-5">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'registration_date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'registration_date'</span>])</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Shape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Total users: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user_id'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>nunique()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Data range: [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]'</span>)</span>
<span id="cb1-10">df.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Shape: (667236, 3)
Total users: 51480
Data range: [2020-10-01 00:00:00, 2023-10-31 00:00:00]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">registration_date</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>d8c465ab-e9fd-5edd-9e4e-c77094700cb5</td>
<td>2020-10-01</td>
<td>2020-08-25</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>269b7f13-a509-5174-85cb-95a8f7b932e8</td>
<td>2020-10-01</td>
<td>2020-08-25</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>bfeac474-5b66-566f-8654-262bb79c873e</td>
<td>2020-10-01</td>
<td>2020-05-31</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>d32fcac5-122c-5463-8aea-01b39b9ad0bb</td>
<td>2020-10-01</td>
<td>2020-09-30</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>c1ece677-e643-5bb3-8701-f1c59a0bf4cd</td>
<td>2020-10-01</td>
<td>2020-09-05</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>This is how the DAU time-series looks like up to 2023-10-31.</p>
<div id="888aa0d7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>).size()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-2">    .plot(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAU, historical'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wowone.github.io/posts/2024-11-01_dau_prediction/dau_prediction_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Suppose that today is 2022-10-31 and we want to predict the DAU metric for the next 2023 year. We define a couple of constants <code>PREDICTION_START</code> and <code>PREDICTION_END</code> which define the prediction period.</p>
<div id="8cc8c106" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">PREDICTION_START <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-11-01'</span></span>
<span id="cb4-2">PREDICTION_END <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-12-31'</span></span></code></pre></div>
</div>
</section>
<section id="predicting-new-users-amount" class="level3">
<h3 class="anchored" data-anchor-id="predicting-new-users-amount">3.2 Predicting new users amount</h3>
<p>Let’s start from the new users prediction. We use the <code>prophet</code> library as one of the easiest ways to predict time-series data. The <code>new_users</code> Series contains such data. We extract it from the original <code>df</code> dataset selecting the rows where the registration date is equal to the date.</p>
<div id="8d953a72" class="cell" data-execution_count="4">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">new_users <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'registration_date'</span>]]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb5-2">    .assign(date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>]))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb5-3">    .groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>).size()</span></code></pre></div>
</details>
</div>
<div id="7c954e0a" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">new_users.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>date
2020-10-01    4
2020-10-02    4
2020-10-03    3
2020-10-04    4
2020-10-05    8
dtype: int64</code></pre>
</div>
</div>
<p><code>prophet</code> requires a time-series as a DataFrame containing two columns <code>ds</code> and <code>y</code>, so we reformat the <code>new_users</code> Series to the <code>new_users_prophet</code> DataFrame. Another thing we need to prepare is to create the <code>future</code> variable containing certain days for prediction: from <code>PREDICTION_START</code> to <code>PREDICTION_END</code>. The plot illustrates predictions for both past and future dates.</p>
<div id="cc95c915" class="cell" data-execution_count="6">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb8-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> prophet <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Prophet</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># suppress prophet logs</span></span>
<span id="cb8-6">logging.getLogger(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prophet"</span>).setLevel(logging.WARNING)</span>
<span id="cb8-7">logging.getLogger(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmdstanpy"</span>).disabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict_new_users(prediction_start, prediction_end, new_users_train, show_plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb8-10">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Prophet()</span>
<span id="cb8-11">    new_users_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_users_train.loc[new_users_train.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> prediction_start]</span>
<span id="cb8-12">    new_users_prophet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>: new_users_train.index, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>: new_users_train.values})</span>
<span id="cb8-13">    m.fit(new_users_prophet)</span>
<span id="cb8-14"></span>
<span id="cb8-15">    periods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(pd.date_range(prediction_start, prediction_end))</span>
<span id="cb8-16">    future <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m.make_future_dataframe(periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>periods)</span>
<span id="cb8-17">    new_users_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m.predict(future)</span>
<span id="cb8-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> show_plot:</span>
<span id="cb8-19">        m.plot(new_users_pred)</span>
<span id="cb8-20">        plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'New users prediction'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-21"></span>
<span id="cb8-22">    new_users_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_users_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-23">        .assign(yhat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> _df: _df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yhat'</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-24">        .rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yhat'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-25">        .set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-26">        .clip(lower<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-27">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>]</span>
<span id="cb8-28"></span>
<span id="cb8-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> new_users_pred</span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>/Users/v.kukushkin/Documents/private/wowone.github.io/.venv/lib/python3.12/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html
  from .autonotebook import tqdm as notebook_tqdm</code></pre>
</div>
</div>
<div id="e0974ae6" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">new_users_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_new_users(PREDICTION_START, PREDICTION_END, new_users)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wowone.github.io/posts/2024-11-01_dau_prediction/dau_prediction_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The <code>new_users_pred</code> Series keeps the predicted users amount.</p>
<div id="dfa2a6b7" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">new_users_pred.tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>date
2024-12-27    52
2024-12-28    56
2024-12-29    71
2024-12-30    79
2024-12-31    74
Name: count, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="getting-the-states" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-states">3.3 Getting the states</h3>
<p>In practice, the most calculations are reasonable to execute as SQL queries to a database where the data is stored. Hereafter, we will simulate such quering with the <code>duckdb</code> library.</p>
<p>We want to assign one of the 7 states to each day of a user’s lifetime within the app. According to the definition, for each day, we need to consider at least the past 30 days. This is where SQL window functions come in. However, since the <code>df</code> data contains only records of <em>active days</em>, we need to explicitly extend it to include the days when a user was not active. In other words, instead of this list of records:</p>
<pre><code>user_id    date          registration_date
1234567    2023-01-01    2023-01-01
1234567    2023-01-03    2023-01-01</code></pre>
<p>we’d like to get a list like this:</p>
<pre><code>user_id    date          is_active    registration_date
1234567    2023-01-01    TRUE         2023-01-01
1234567    2023-01-02    FALSE        2023-01-01
1234567    2023-01-03    TRUE         2023-01-01
1234567    2023-01-04    FALSE        2023-01-01
1234567    2023-01-05    FALSE        2023-01-01
...        ...           ...          ...
1234567    2023-10-31    FALSE        2023-01-01</code></pre>
<p>For readability purposes we split the following SQL query into multiple subqueries.</p>
<ul>
<li><code>full_range</code>: Create a full sequence of dates for each user.</li>
<li><code>dau_full</code>: Get the full list of both active and inactive records.</li>
<li><code>states</code>: Assign one of the 7 states for each day of a user’s lifetime.</li>
</ul>
<div id="7f67aa64" class="cell" data-execution_count="9">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb15-2"></span>
<span id="cb15-3">DATASET_START <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020-11-01'</span></span>
<span id="cb15-4">DATASET_END <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-10-31'</span></span>
<span id="cb15-5">OBSERVATION_START <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020-10-01'</span></span>
<span id="cb15-6"></span>
<span id="cb15-7">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb15-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">WITH</span></span>
<span id="cb15-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">full_range AS (</span></span>
<span id="cb15-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT</span></span>
<span id="cb15-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        user_id, UNNEST(generate_series(greatest(registration_date, '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>OBSERVATION_START<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'), date '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATASET_END<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">', INTERVAL 1 DAY))::date AS date</span></span>
<span id="cb15-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM (</span></span>
<span id="cb15-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        SELECT DISTINCT user_id, registration_date FROM df</span></span>
<span id="cb15-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb15-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb15-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">dau_full AS (</span></span>
<span id="cb15-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT</span></span>
<span id="cb15-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        fr.user_id,</span></span>
<span id="cb15-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        fr.date,</span></span>
<span id="cb15-20"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        df.date IS NOT NULL AS is_active,</span></span>
<span id="cb15-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        registration_date</span></span>
<span id="cb15-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM full_range AS fr</span></span>
<span id="cb15-23"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    LEFT JOIN df USING(user_id, date)</span></span>
<span id="cb15-24"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb15-25"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">states AS (</span></span>
<span id="cb15-26"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT</span></span>
<span id="cb15-27"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        user_id,</span></span>
<span id="cb15-28"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        date,</span></span>
<span id="cb15-29"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        is_active,</span></span>
<span id="cb15-30"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        first_value(registration_date IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY date) AS registration_date,</span></span>
<span id="cb15-31"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        SUM(is_active::int) OVER (PARTITION BY user_id ORDER BY date ROWS BETWEEN 6 PRECEDING and 1 PRECEDING) AS active_days_back_6d,</span></span>
<span id="cb15-32"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        SUM(is_active::int) OVER (PARTITION BY user_id ORDER BY date ROWS BETWEEN 29 PRECEDING and 1 PRECEDING) AS active_days_back_29d,</span></span>
<span id="cb15-33"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        CASE</span></span>
<span id="cb15-34"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            WHEN date = registration_date THEN 'new'</span></span>
<span id="cb15-35"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            WHEN is_active = TRUE AND active_days_back_6d BETWEEN 1 and 6 THEN 'current'</span></span>
<span id="cb15-36"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            WHEN is_active = TRUE AND active_days_back_6d = 0 AND IFNULL(active_days_back_29d, 0) &gt; 0 THEN 'reactivated'</span></span>
<span id="cb15-37"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            WHEN is_active = TRUE AND active_days_back_6d = 0 AND IFNULL(active_days_back_29d, 0) = 0 THEN 'resurrected'</span></span>
<span id="cb15-38"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            WHEN is_active = FALSE AND active_days_back_6d &gt; 0 THEN 'at_risk_wau'</span></span>
<span id="cb15-39"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            WHEN is_active = FALSE AND active_days_back_6d = 0 AND ifnull(active_days_back_29d, 0) &gt; 0 THEN 'at_risk_mau'</span></span>
<span id="cb15-40"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            ELSE 'dormant'</span></span>
<span id="cb15-41"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        END AS state</span></span>
<span id="cb15-42"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM dau_full</span></span>
<span id="cb15-43"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb15-44"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT user_id, date, state FROM states</span></span>
<span id="cb15-45"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE date BETWEEN '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATASET_START<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">' AND '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATASET_END<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb15-46"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">ORDER BY user_id, date</span></span>
<span id="cb15-47"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb15-48">states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.sql(query).df()</span></code></pre></div>
</details>
</div>
<p>The query results are kept in the <code>states</code> DataFrame:</p>
<div id="8a488fa8" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">states.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">user_id</th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">state</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>00002b68-adba-5a55-92d7-8ea8934c6db3</td>
<td>2023-06-23</td>
<td>new</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>00002b68-adba-5a55-92d7-8ea8934c6db3</td>
<td>2023-06-24</td>
<td>current</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>00002b68-adba-5a55-92d7-8ea8934c6db3</td>
<td>2023-06-25</td>
<td>current</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>00002b68-adba-5a55-92d7-8ea8934c6db3</td>
<td>2023-06-26</td>
<td>current</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>00002b68-adba-5a55-92d7-8ea8934c6db3</td>
<td>2023-06-27</td>
<td>current</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="calculating-the-transition-matrix" class="level3">
<h3 class="anchored" data-anchor-id="calculating-the-transition-matrix">3.4 Calculating the transition matrix</h3>
<p>Having obtained these states, we can calculate state transition frequencies. In the real world, due to the large amount of data, it would be more effective to use a SQL query rather than a Python script. We calculate these frequencies day-wise since we’re going to study how the prediction depends on the period in which transitions are considered further.</p>
<div id="f2385527" class="cell" data-execution_count="11">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb17-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT</span></span>
<span id="cb17-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    date,</span></span>
<span id="cb17-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    state_from,</span></span>
<span id="cb17-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    state_to,</span></span>
<span id="cb17-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    COUNT(*) AS cnt,</span></span>
<span id="cb17-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM (</span></span>
<span id="cb17-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT</span></span>
<span id="cb17-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        date,</span></span>
<span id="cb17-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        state AS state_to,</span></span>
<span id="cb17-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        lag(state) OVER (PARTITION BY user_id ORDER BY date) AS state_from</span></span>
<span id="cb17-12"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM states</span></span>
<span id="cb17-13"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb17-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE state_from IS NOT NULL</span></span>
<span id="cb17-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY date, state_from, state_to</span></span>
<span id="cb17-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">ORDER BY date, state_from, state_to;</span></span>
<span id="cb17-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb17-18">transitions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.sql(query).df()</span></code></pre></div>
</details>
</div>
<p>The result is stored in the <code>transitions</code> DataFrame.</p>
<div id="264b1d0e" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">transitions.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">state_from</th>
<th data-quarto-table-cell-role="th">state_to</th>
<th data-quarto-table-cell-role="th">cnt</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2020-11-02</td>
<td>at_risk_mau</td>
<td>at_risk_mau</td>
<td>273</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2020-11-02</td>
<td>at_risk_mau</td>
<td>dormant</td>
<td>4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2020-11-02</td>
<td>at_risk_mau</td>
<td>reactivated</td>
<td>14</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2020-11-02</td>
<td>at_risk_wau</td>
<td>at_risk_mau</td>
<td>18</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2020-11-02</td>
<td>at_risk_wau</td>
<td>at_risk_wau</td>
<td>138</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Now, we can calculate the transition matrix <img src="https://latex.codecogs.com/png.latex?M">. We define the <code>get_transition_matrix</code> function, which accepts the <code>transitions</code> DataFrame and a pair of dates that bounds the transitions to be considered.</p>
<div id="529fbf8a" class="cell" data-execution_count="13">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">states_order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'current'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reactivated'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resurrected'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'at_risk_wau'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'at_risk_mau'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dormant'</span>]</span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_transition_matrix(transitions, date1, date2):</span>
<span id="cb19-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pd.to_datetime(date1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> pd.to_datetime(DATASET_END):</span>
<span id="cb19-5">        date1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(DATASET_END) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pd.Timedelta(days<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb19-6"></span>
<span id="cb19-7">    probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transitions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-8">        .loc[<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> _df: _df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>].between(date1, date2)]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-9">        .groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state_from'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state_to'</span>], as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-10">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnt'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-11">        .assign(</span>
<span id="cb19-12">            supp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> _df: _df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state_from'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnt'</span>].transform(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>),</span>
<span id="cb19-13">            prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> _df: _df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnt'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> _df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'supp'</span>]</span>
<span id="cb19-14">        )</span>
<span id="cb19-15"></span>
<span id="cb19-16">    M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probs.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state_from'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state_to'</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prob'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-17">        .reindex(states_order, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-18">        .reindex(states_order, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-19">        .fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-20">        .astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb19-21"></span>
<span id="cb19-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> M</span></code></pre></div>
</details>
</div>
<p>As a baseline, let’s calculate the transition matrix for the whole year from <code>2021-11-01</code> to <code>2022-10-31</code>.</p>
<div id="c481d451" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_transition_matrix(transitions, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-11-01'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-10-31'</span>)</span>
<span id="cb20-2">M</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">state_to</th>
<th data-quarto-table-cell-role="th">new</th>
<th data-quarto-table-cell-role="th">current</th>
<th data-quarto-table-cell-role="th">reactivated</th>
<th data-quarto-table-cell-role="th">resurrected</th>
<th data-quarto-table-cell-role="th">at_risk_wau</th>
<th data-quarto-table-cell-role="th">at_risk_mau</th>
<th data-quarto-table-cell-role="th">dormant</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">state_from</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">new</td>
<td>0.0</td>
<td>0.515934</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.484066</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">current</td>
<td>0.0</td>
<td>0.851325</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.148675</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">reactivated</td>
<td>0.0</td>
<td>0.365867</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.634133</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">resurrected</td>
<td>0.0</td>
<td>0.316474</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.683526</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">at_risk_wau</td>
<td>0.0</td>
<td>0.098246</td>
<td>0.004472</td>
<td>0.000000</td>
<td>0.766263</td>
<td>0.131020</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">at_risk_mau</td>
<td>0.0</td>
<td>0.000000</td>
<td>0.009598</td>
<td>0.000173</td>
<td>0.000000</td>
<td>0.950109</td>
<td>0.040120</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">dormant</td>
<td>0.0</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000387</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.999613</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="getting-the-initial-state-counts" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-initial-state-counts">3.5 Getting the initial state counts</h3>
<p>An initial state is easily retrieved from the <code>states</code> DataFrame by the <code>get_state0</code> function and the corresponding SQL query. We assign the result to the <code>state0</code> variable.</p>
<div id="33b26b29" class="cell" data-execution_count="15">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_state0(date):</span>
<span id="cb21-2">    query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb21-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT state, count(*) AS cnt</span></span>
<span id="cb21-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM states</span></span>
<span id="cb21-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    WHERE date = '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb21-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    GROUP BY state</span></span>
<span id="cb21-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb21-8"></span>
<span id="cb21-9">    state0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.sql(query).df()</span>
<span id="cb21-10">    state0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state0.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>).reindex(states_order)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnt'</span>]</span>
<span id="cb21-11">    </span>
<span id="cb21-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> state0</span></code></pre></div>
</details>
</div>
<div id="708cd4f5" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">state0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_state0(DATASET_END)</span>
<span id="cb22-2">state0</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>state
new               20
current          475
reactivated       15
resurrected       19
at_risk_wau      404
at_risk_mau     1024
dormant        49523
Name: cnt, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="predicting-dau" class="level3">
<h3 class="anchored" data-anchor-id="predicting-dau">3.6 Predicting DAU</h3>
<p>The <code>predict_dau</code> function below accepts all the previous variables required for the DAU prediction and makes this prediction for a date range defined by the <code>start_date</code> and <code>end_date</code> arguments.</p>
<div id="ffd464d7" class="cell" data-execution_count="17">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict_dau(M, state0, start_date, end_date, new_users):</span>
<span id="cb24-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Predicts DAU over a given date range.</span></span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    M : pandas.DataFrame</span></span>
<span id="cb24-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Transition matrix representing user state changes.</span></span>
<span id="cb24-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    state0 : pandas.Series</span></span>
<span id="cb24-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        counts of initial state of users.</span></span>
<span id="cb24-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    start_date : str</span></span>
<span id="cb24-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Start date of the prediction period in 'YYYY-MM-DD' format.</span></span>
<span id="cb24-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    end_date : str</span></span>
<span id="cb24-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        End date of the prediction period in 'YYYY-MM-DD' format.</span></span>
<span id="cb24-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    new_users : int or pandas.Series</span></span>
<span id="cb24-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The expected amount of new users for each day between `start_date` and `end_date`.</span></span>
<span id="cb24-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If a Series, it should have dates as the index.</span></span>
<span id="cb24-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If an int, the same number is used for each day.</span></span>
<span id="cb24-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb24-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb24-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb24-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pandas.DataFrame</span></span>
<span id="cb24-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        DataFrame containing the predicted DAU, WAU, and MAU for each day in the date range,</span></span>
<span id="cb24-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        with columns for different user states and tot.</span></span>
<span id="cb24-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb24-26">    </span>
<span id="cb24-27">    dates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.date_range(start_date, end_date)</span>
<span id="cb24-28">    dates.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span></span>
<span id="cb24-29">    dau_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb24-30">    new_dau <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> state0.copy()</span>
<span id="cb24-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> date <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dates:</span>
<span id="cb24-32">        new_dau <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (M.transpose() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> new_dau).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb24-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(new_users, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb24-34">            new_users_today <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_users</span>
<span id="cb24-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb24-36">            new_users_today <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_users.astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>).loc[date] </span>
<span id="cb24-37">        new_dau.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_users_today</span>
<span id="cb24-38">        dau_pred.append(new_dau.tolist())</span>
<span id="cb24-39"></span>
<span id="cb24-40">    dau_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(dau_pred, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dates, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>states_order)</span>
<span id="cb24-41">    dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'current'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reactivated'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resurrected'</span>]</span>
<span id="cb24-42">    dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wau'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'at_risk_wau'</span>]</span>
<span id="cb24-43">    dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mau'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'at_risk_wau'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'at_risk_mau'</span>]</span>
<span id="cb24-44">    </span>
<span id="cb24-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dau_pred</span></code></pre></div>
</details>
</div>
<div id="07b1d7bb" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">dau_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_dau(M, state0, PREDICTION_START, PREDICTION_END, new_users_pred)</span>
<span id="cb25-2">dau_pred</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">new</th>
<th data-quarto-table-cell-role="th">current</th>
<th data-quarto-table-cell-role="th">reactivated</th>
<th data-quarto-table-cell-role="th">resurrected</th>
<th data-quarto-table-cell-role="th">at_risk_wau</th>
<th data-quarto-table-cell-role="th">at_risk_mau</th>
<th data-quarto-table-cell-role="th">dormant</th>
<th data-quarto-table-cell-role="th">dau</th>
<th data-quarto-table-cell-role="th">wau</th>
<th data-quarto-table-cell-role="th">mau</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2023-11-01</td>
<td>29</td>
<td>465</td>
<td>11</td>
<td>19</td>
<td>412</td>
<td>1025</td>
<td>49544</td>
<td>524</td>
<td>936</td>
<td>1961</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2023-11-02</td>
<td>25</td>
<td>461</td>
<td>11</td>
<td>19</td>
<td>418</td>
<td>1027</td>
<td>49565</td>
<td>516</td>
<td>934</td>
<td>1961</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2023-11-03</td>
<td>21</td>
<td>456</td>
<td>11</td>
<td>19</td>
<td>420</td>
<td>1030</td>
<td>49587</td>
<td>507</td>
<td>927</td>
<td>1957</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2023-11-04</td>
<td>22</td>
<td>450</td>
<td>11</td>
<td>19</td>
<td>419</td>
<td>1033</td>
<td>49609</td>
<td>502</td>
<td>921</td>
<td>1954</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2023-11-05</td>
<td>34</td>
<td>445</td>
<td>11</td>
<td>19</td>
<td>418</td>
<td>1036</td>
<td>49631</td>
<td>509</td>
<td>927</td>
<td>1963</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2024-12-27</td>
<td>52</td>
<td>505</td>
<td>12</td>
<td>24</td>
<td>487</td>
<td>1129</td>
<td>61599</td>
<td>593</td>
<td>1080</td>
<td>2209</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2024-12-28</td>
<td>56</td>
<td>516</td>
<td>13</td>
<td>24</td>
<td>497</td>
<td>1136</td>
<td>61620</td>
<td>609</td>
<td>1106</td>
<td>2242</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2024-12-29</td>
<td>71</td>
<td>529</td>
<td>13</td>
<td>24</td>
<td>509</td>
<td>1144</td>
<td>61641</td>
<td>637</td>
<td>1146</td>
<td>2290</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2024-12-30</td>
<td>79</td>
<td>549</td>
<td>13</td>
<td>24</td>
<td>527</td>
<td>1153</td>
<td>61663</td>
<td>665</td>
<td>1192</td>
<td>2345</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2024-12-31</td>
<td>74</td>
<td>572</td>
<td>13</td>
<td>24</td>
<td>548</td>
<td>1164</td>
<td>61685</td>
<td>683</td>
<td>1231</td>
<td>2395</td>
</tr>
</tbody>
</table>

<p>427 rows × 10 columns</p>
</div>
</div>
</div>
<p>Besides the expected <code>dau</code>, <code>wau</code>, and <code>mau</code> columns, the output contains the number of users in each state for each prediction date.</p>
<p>Finally, we calculate the ground-truth values of DAU, WAU, and MAU (along with the corresponding state decomposition), keep them in the <code>dau_true</code> DataFrame, and plot the predicted and true values altogether.</p>
<div id="c7223b81" class="cell" data-execution_count="19">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb26-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT date, state, COUNT(*) AS cnt</span></span>
<span id="cb26-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM states</span></span>
<span id="cb26-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY date, state</span></span>
<span id="cb26-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">ORDER BY date, state;</span></span>
<span id="cb26-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb26-7"></span>
<span id="cb26-8">dau_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.sql(query).df()</span>
<span id="cb26-9">dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>])</span>
<span id="cb26-10">dau_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_true.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'state'</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cnt'</span>)</span>
<span id="cb26-11">dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'current'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reactivated'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resurrected'</span>]</span>
<span id="cb26-12">dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wau'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'at_risk_wau'</span>]</span>
<span id="cb26-13">dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mau'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'at_risk_wau'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'at_risk_mau'</span>]</span></code></pre></div>
</details>
</div>
<div id="30a750f7" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">dau_true.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">state</th>
<th data-quarto-table-cell-role="th">at_risk_mau</th>
<th data-quarto-table-cell-role="th">at_risk_wau</th>
<th data-quarto-table-cell-role="th">current</th>
<th data-quarto-table-cell-role="th">dormant</th>
<th data-quarto-table-cell-role="th">new</th>
<th data-quarto-table-cell-role="th">reactivated</th>
<th data-quarto-table-cell-role="th">resurrected</th>
<th data-quarto-table-cell-role="th">dau</th>
<th data-quarto-table-cell-role="th">wau</th>
<th data-quarto-table-cell-role="th">mau</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2020-11-01</td>
<td>291.0</td>
<td>207.0</td>
<td>293.0</td>
<td>840.0</td>
<td>36.0</td>
<td>14.0</td>
<td>3.0</td>
<td>346.0</td>
<td>553.0</td>
<td>844.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2020-11-02</td>
<td>291.0</td>
<td>208.0</td>
<td>327.0</td>
<td>836.0</td>
<td>53.0</td>
<td>14.0</td>
<td>8.0</td>
<td>402.0</td>
<td>610.0</td>
<td>901.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2020-11-03</td>
<td>296.0</td>
<td>205.0</td>
<td>383.0</td>
<td>840.0</td>
<td>41.0</td>
<td>10.0</td>
<td>3.0</td>
<td>437.0</td>
<td>642.0</td>
<td>938.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2020-11-04</td>
<td>296.0</td>
<td>246.0</td>
<td>375.0</td>
<td>842.0</td>
<td>27.0</td>
<td>13.0</td>
<td>6.0</td>
<td>421.0</td>
<td>667.0</td>
<td>963.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2020-11-05</td>
<td>300.0</td>
<td>275.0</td>
<td>373.0</td>
<td>845.0</td>
<td>33.0</td>
<td>8.0</td>
<td>4.0</td>
<td>418.0</td>
<td>693.0</td>
<td>993.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="87251bb7" class="cell" data-execution_count="21">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">pd.concat([dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>], dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>]])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb28-2">    .plot(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAU, historical &amp; predicted'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wowone.github.io/posts/2024-11-01_dau_prediction/dau_prediction_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="model-evaluation" class="level2">
<h2 class="anchored" data-anchor-id="model-evaluation">4. Model evaluation</h2>
<section id="baseline-comparison" class="level3">
<h3 class="anchored" data-anchor-id="baseline-comparison">4.1 Baseline comparison</h3>
<p>First of all, let’s check whether we really need to build a complex model to predict DAU. Wouldn’t it be better to predict DAU as a general time-series using the mentioned <code>prophet</code> library? The function <code>predict_dau_simple</code> implements this. We try to use some tweaks available in the library in order to make the prediction more accurate:</p>
<ul>
<li>we use logistic model instead of linear in order to avoid negative values;</li>
<li>we add explicitly monthly and yearly seasonality;</li>
<li>we remove the outliers.</li>
<li>we set explicitly define peak values for January and February as “holidays”.</li>
</ul>
<p>The fact that the code turns out to be quite sophisticated indicates that one can’t simply apply <code>prophet</code> to the DAU time-series.</p>
<div id="be3bc544" class="cell" data-execution_count="22">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict_dau_prophet(prediction_start, prediction_end, dau_true, show_plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb29-2">    holidays <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb29-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'holiday'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'january_spike'</span>,</span>
<span id="cb29-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>: pd.date_range(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-01-01'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-01-31'</span>, freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>).tolist() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb29-5">              pd.date_range(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-01-01'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-01-31'</span>, freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>).tolist(),</span>
<span id="cb29-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lower_window'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb29-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper_window'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span></span>
<span id="cb29-8">    })</span>
<span id="cb29-9"></span>
<span id="cb29-10">    m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Prophet(growth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logistic'</span>, holidays<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>holidays)</span>
<span id="cb29-11">    m.add_seasonality(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'monthly'</span>, period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30.5</span>, fourier_order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb29-12">    m.add_seasonality(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yearly'</span>, period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365</span>, fourier_order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb29-13"></span>
<span id="cb29-14">    train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_true.loc[(dau_true.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> prediction_start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (dau_true.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2021-08-01'</span>)]</span>
<span id="cb29-15">    train_prophet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>: train.index, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>: train.values})</span>
<span id="cb29-16">    train_prophet.loc[train_prophet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>].between(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-06-07'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-06-09'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb29-17">    train_prophet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new_year_peak'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (train_prophet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-01-01'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;\</span></span>
<span id="cb29-18">                                     (train_prophet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-02-14'</span>)</span>
<span id="cb29-19">    m.add_regressor(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new_year_peak'</span>)</span>
<span id="cb29-20">    train_prophet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cap'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_true.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span></span>
<span id="cb29-21">    train_prophet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floor'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb29-22"></span>
<span id="cb29-23">    m.fit(train_prophet)</span>
<span id="cb29-24"></span>
<span id="cb29-25">    periods <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(pd.date_range(prediction_start, prediction_end))</span>
<span id="cb29-26">    future <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m.make_future_dataframe(periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>periods)</span>
<span id="cb29-27">    future[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new_year_peak'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (future[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-01-01'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (future[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-02-14'</span>)</span>
<span id="cb29-28">    future[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cap'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_true.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span></span>
<span id="cb29-29">    future[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'floor'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb29-30">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> m.predict(future)</span>
<span id="cb29-31"></span>
<span id="cb29-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> show_plot:</span>
<span id="cb29-33">        m.plot(pred)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb29-34"></span>
<span id="cb29-35">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb29-36">        .assign(yhat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> _df: _df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yhat'</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb29-37">        .rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yhat'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb29-38">        .set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb29-39">        .clip(lower<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb29-40">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb29-41">        .loc[<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> s: (s.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> prediction_start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (s.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> prediction_end)]</span>
<span id="cb29-42"></span>
<span id="cb29-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pred</span></code></pre></div>
</details>
</div>
<p>Hereafter we test a prediction for multiple predicting horizonts: 3, 6, and 12 months. As a result, we get 3 test sets:</p>
<ul>
<li>3-months horizont: <code>2023-08-01</code> - <code>2023-10-31</code>,</li>
<li>6-months horizont: <code>2023-05-01</code> - <code>2023-10-31</code>,</li>
<li>1-year horizont: <code>2022-11-01</code> - <code>2023-10-31</code>.</li>
</ul>
<p>For each test set we calculate the <a href="https://en.wikipedia.org/wiki/Mean_absolute_percentage_error">MAPE</a> loss function.</p>
<div id="5a0e673e" class="cell" data-execution_count="23">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mean_absolute_percentage_error</span>
<span id="cb30-2"></span>
<span id="cb30-3">mapes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb30-4">prediction_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-10-31'</span></span>
<span id="cb30-5">prediction_horizont <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>]</span>
<span id="cb30-6"></span>
<span id="cb30-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> offset <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prediction_horizont:</span>
<span id="cb30-8">    prediction_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(prediction_end) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pd.DateOffset(months<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb30-9">    prediction_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction_start.replace(day<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb30-10">    prediction_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-10-31'</span></span>
<span id="cb30-11">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_dau_prophet(prediction_start, prediction_end, dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>], show_plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb30-12">    mape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean_absolute_percentage_error(dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>].reindex(pred.index), pred)</span>
<span id="cb30-13">    mapes.append(mape)</span>
<span id="cb30-14"></span>
<span id="cb30-15">mapes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'horizont'</span>: prediction_horizont, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MAPE'</span>: mapes})</span>
<span id="cb30-16">mapes</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">horizont</th>
<th data-quarto-table-cell-role="th">MAPE</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>3</td>
<td>0.350167</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>6</td>
<td>0.185246</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>12</td>
<td>0.215338</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The MAPE error turns out to be high: 18% - 35%. The fact that the shortest horizont has the highest error means that the model is tuned for the long-term predictions. This is another inconvenience of such an approach: we have to tune the model for each prediction horizont. So this is our baseline. In the next section we’ll compare it with the more advanced models.</p>
</section>
<section id="general-evaluation" class="level3">
<h3 class="anchored" data-anchor-id="general-evaluation">4.2 General evaluation</h3>
<p>In this section we evaluate the model implemented in the section 3. So far we set the transition period as 1 year before the prediction start. We’ll study how the prediction depends on the transition period in the next section. As for the new users, we run the model using two options: the real values and the predicted ones. Similarly, we fix the same 3 prediction horizonts and test the model on them.</p>
<p>The <code>make_predicion</code> function below implements the described opttions. It accepts <code>prediction_start</code>, <code>prediction_end</code> arguments defining the prediction period for a given horizont, <code>new_users_mode</code> which can be either <code>true</code> or <code>predict</code>, and <code>transition_period</code>.</p>
<div id="2a7c7a08" class="cell" data-execution_count="24">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb31-2"></span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> make_prediction(prediction_start, prediction_end, new_users_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'predict'</span>, transition_period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'last_30d'</span>):</span>
<span id="cb31-5">    prediction_start_minus_1d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(prediction_start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pd.Timedelta(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1d'</span>)</span>
<span id="cb31-6">    state0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_state0(prediction_start_minus_1d)</span>
<span id="cb31-7">    </span>
<span id="cb31-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> new_users_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'predict'</span>:</span>
<span id="cb31-9">        new_users_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_new_users(prediction_start, prediction_end, new_users, show_plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb31-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> new_users_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>:</span>
<span id="cb31-11">        new_users_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_users.copy()</span>
<span id="cb31-12"></span>
<span id="cb31-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> transition_period.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'last_'</span>):</span>
<span id="cb31-14">        shift <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(re.search(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'last_(\d+)d'</span>, transition_period).group(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb31-15">        transitions_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(prediction_start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pd.Timedelta(shift, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>)</span>
<span id="cb31-16">        M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_transition_matrix(transitions, transitions_start, prediction_start_minus_1d)</span>
<span id="cb31-17">        dau_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_dau(M, state0, prediction_start, prediction_end, new_users_pred)</span>
<span id="cb31-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb31-19">        transitions_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(prediction_start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pd.Timedelta(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">240</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d'</span>)</span>
<span id="cb31-20">        M_base <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_transition_matrix(transitions, transitions_start, prediction_start_minus_1d)</span>
<span id="cb31-21">        dau_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame()</span>
<span id="cb31-22"></span>
<span id="cb31-23">        month_starts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.date_range(prediction_start, prediction_end, freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1MS'</span>)</span>
<span id="cb31-24">        N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(month_starts)</span>
<span id="cb31-25"></span>
<span id="cb31-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, prediction_month_start <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(month_starts):</span>
<span id="cb31-27">            prediction_month_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.offsets.MonthEnd().rollforward(prediction_month_start)</span>
<span id="cb31-28">            transitions_month_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction_month_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pd.Timedelta(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'365D'</span>)</span>
<span id="cb31-29">            transitions_month_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction_month_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pd.Timedelta(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'365D'</span>)</span>
<span id="cb31-30"></span>
<span id="cb31-31">            M_seasonal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_transition_matrix(transitions, transitions_month_start, transitions_month_end)</span>
<span id="cb31-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> transition_period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smoothing'</span>:</span>
<span id="cb31-33">                i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb31-34">                M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> M_seasonal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> M_base</span>
<span id="cb31-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> transition_period.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seasonal_'</span>):</span>
<span id="cb31-36">                seasonal_coef <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(re.search(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'seasonal_(0\.\d+)'</span>, transition_period).group(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb31-37">                M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> seasonal_coef <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> M_seasonal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> seasonal_coef) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> M_base</span>
<span id="cb31-38">            </span>
<span id="cb31-39">            dau_tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_dau(M, state0, prediction_month_start, prediction_month_end, new_users_pred)</span>
<span id="cb31-40">            dau_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([dau_pred, dau_tmp])</span>
<span id="cb31-41"></span>
<span id="cb31-42">            state0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_tmp.loc[prediction_month_end][states_order]</span>
<span id="cb31-43"></span>
<span id="cb31-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dau_pred</span>
<span id="cb31-45"></span>
<span id="cb31-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> prediction_details(dau_true, dau_pred, show_plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb31-47">    y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_true.reindex(dau_pred.index)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>]</span>
<span id="cb31-48">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>]</span>
<span id="cb31-49">    mape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean_absolute_percentage_error(y_true, y_pred) </span>
<span id="cb31-50"></span>
<span id="cb31-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> show_plot:</span>
<span id="cb31-52">        prediction_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(y_true.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>().date())</span>
<span id="cb31-53">        prediction_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(y_true.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>().date())</span>
<span id="cb31-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb31-55">            y_true.plot(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAU true'</span>)</span>
<span id="cb31-56">            y_pred.plot(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAU pred'</span>)</span>
<span id="cb31-57">            plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'DAU prediction, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prediction_start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prediction_end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb31-58">            plt.legend()</span>
<span id="cb31-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb31-60">            y_true.plot(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAU true'</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb31-61">            y_pred.plot(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAU pred'</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb31-62">            ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'DAU prediction, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prediction_start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prediction_end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb31-63">            ax.legend()</span>
<span id="cb31-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> mape</span></code></pre></div>
</details>
</div>
<p>The charts on the left relate to the <code>new_users_mode = 'true'</code> option, while the right ones relate to the <code>new_users_mode = 'predict'</code> option.</p>
<div id="2def0809" class="cell" data-execution_count="25">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb32-2">mapes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-3">prediction_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-10-31'</span></span>
<span id="cb32-4">prediction_horizont <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>]</span>
<span id="cb32-5"></span>
<span id="cb32-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, offset <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(prediction_horizont):</span>
<span id="cb32-7">    prediction_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(prediction_end) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pd.DateOffset(months<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb32-8">    prediction_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction_start.replace(day<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb32-9">    args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb32-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prediction_start'</span>: prediction_start,</span>
<span id="cb32-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prediction_end'</span>: prediction_end,</span>
<span id="cb32-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transition_period'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'last_365d'</span></span>
<span id="cb32-13">    }</span>
<span id="cb32-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j, new_users_mode <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'predict'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>]):</span>
<span id="cb32-15">        args[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new_users_mode'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_users_mode</span>
<span id="cb32-16">        dau_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prediction(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>args)</span>
<span id="cb32-17">        mape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction_details(dau_true, dau_pred, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>axs[i, j])</span>
<span id="cb32-18">        mapes.append([offset, new_users_mode, mape])</span>
<span id="cb32-19"></span>
<span id="cb32-20">mapes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(mapes, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'horizont'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new_users'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MAPE'</span>])</span>
<span id="cb32-21">plt.tight_layout()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wowone.github.io/posts/2024-11-01_dau_prediction/dau_prediction_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="c457ce87" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">mapes.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'horizont'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new_users'</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MAPE'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">new_users</th>
<th data-quarto-table-cell-role="th">predict</th>
<th data-quarto-table-cell-role="th">true</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">horizont</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>0.079538</td>
<td>0.103631</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">6</td>
<td>0.125035</td>
<td>0.084652</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>0.651502</td>
<td>0.086885</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We notice multiple things.</p>
<ul>
<li>In general, the model demonstrates much better results than the baseline. Indeed, the baseline is based on the historical DAU data only, while the model uses the user states information.</li>
<li>However, for the 1-year horizont and <code>new_users_mode='predict'</code> the MAPE error is huge: 65%. This is 3 times higher than the corresponding baseline error (21%). On the other hand, <code>new_users_mode='true'</code> option gives a much better result: 8%. It means that the new users prediction has a huge impact on the model, especially for long-term predictions. For the shorter periods the difference is less dramatic. The major difference for such a difference is that 1-year period includes Christmas with its extreme values. As a result, i) it’s hard to predict such high new user values, ii) the period heavily impacts user behavior, the transition matrix and, consequently, DAU values. Hence, we strongly recommend to implement the new user prediction carefully. The baseline model was specially tuned for this Christmas period, so it’s not surprising that it outperforms the Markov model.</li>
<li>When the new users prediction is accurate, the model captures trends well. It means that using last 365 days for the transition matrix calculation is a reasonable choice.</li>
<li>Interestingly, the true new users data provides worse results for the 3-months prediction. This is nothing but a coincidence. The wrong new users prediction in October 2023 reversed the predicted DAU trend and made MAPE a bit lower.</li>
</ul>
<p>Now, let’s decompose the prediction error and see which states contribure the most. Since we already know that the new users prediction has a huge impact on the model, we focus on a shorter prediction period in order to study the other factors.</p>
<div id="8384a2ee" class="cell" data-execution_count="27">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">dau_component_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'current'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reactivated'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'resurrected'</span>]</span>
<span id="cb34-2"></span>
<span id="cb34-3">dau_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prediction(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-08-01'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-10-31'</span>, new_users_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'predict'</span>, transition_period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'last_365d'</span>)</span>
<span id="cb34-4">figure, (ax1, ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb34-5"></span>
<span id="cb34-6">dau_pred[dau_component_cols]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb34-7">    .subtract(dau_true[dau_component_cols])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb34-8">    .reindex(dau_pred.index)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb34-9">    .plot(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Prediction error by state'</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax1)</span>
<span id="cb34-10"></span>
<span id="cb34-11">dau_pred[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'current'</span>]]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb34-12">    .subtract(dau_true[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'current'</span>]])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb34-13">    .div(dau_true[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'current'</span>]])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb34-14">    .reindex(dau_pred.index)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb34-15">    .plot(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Relative prediction error (current state)'</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wowone.github.io/posts/2024-11-01_dau_prediction/dau_prediction_files/figure-html/cell-28-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>From the left chart we notice that the error is basically contributed by the <code>current</code> state. It’s not surprising since this state contributes to DAU the most. The error for the <code>new</code>, <code>reactivated</code>, and <code>resurrected</code> states is quite low. Another interesting thing is that this error is mostly negative. Perhaps it mean that the new users who appeared in the prediction period are more engaged that the users from the past.</p>
<p>As for the relative error on the right chart, it makes sense to analyze it for the <code>current</code> state only. This is because the daily amount of the reactivated and resurrected states are low so the relative error is high and noisy. The relative error for the <code>current</code> state varies between -20% and 5% which is quite high. And since the <code>current</code> state amount is mostly regulated by the <code>current</code> -&gt; <code>current</code> conversion rate (it’s roughly 0.8), this error is explained by the transition matrix inaccuracy.</p>
</section>
<section id="transitions-period-impact" class="level3">
<h3 class="anchored" data-anchor-id="transitions-period-impact">4.3 Transitions period impact</h3>
<p>In the previous section we kept the transitions period fixed – 1 year before a prediction start. Now we’re going to study how long this period should be to get more accurate prediction. We consider the same prediction horizonts of 3, 6, and 12 months. In order to mitigate the noise from the new users prediction, we use the real values of the new users amount.</p>
<div id="1d5fc43c" class="cell" data-execution_count="28">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> prediction_offset <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prediction_horizont:</span>
<span id="cb35-4">    prediction_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(prediction_end) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pd.DateOffset(months<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prediction_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb35-5">    prediction_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction_start.replace(day<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb35-6"></span>
<span id="cb35-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> transition_offset <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>):</span>
<span id="cb35-8">        dau_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prediction(</span>
<span id="cb35-9">            prediction_start, prediction_end, new_users_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>,</span>
<span id="cb35-10">            transition_period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'last_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>transition_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">d'</span></span>
<span id="cb35-11">        )</span>
<span id="cb35-12">        mape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction_details(dau_true, dau_pred, show_plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb35-13">        result.append([prediction_offset, transition_offset, mape])</span>
<span id="cb35-14">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(result, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prediction_period'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transition_period'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mape'</span>])</span>
<span id="cb35-15"></span>
<span id="cb35-16">result.pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'transition_period'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prediction_period'</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mape'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb35-17">    .plot(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MAPE by prediction and transition period'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wowone.github.io/posts/2024-11-01_dau_prediction/dau_prediction_files/figure-html/cell-29-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>It turns out that the optimal transitions period depends on the prediction horizont. Shorter horizonts require shorter transitions periods: the minimal MAPE error is achieved at 1, 4, and 8 transition periods for the 3, 6, and 12 months correspondingly. It seems this is because the longer horizonts contain some seasonal effects that could be captured only by the longer transitions periods.</p>
</section>
<section id="obsolence-and-seasonality" class="level3">
<h3 class="anchored" data-anchor-id="obsolence-and-seasonality">4.4 Obsolence and seasonality</h3>
<p>Nevertheless, fixing a single transition matrix for predicting the whole year ahead doesn’t seem to be a good idea: such a model would be too rigid. Usually, the user behavior varies depending on a season. For example, users who appear after Christmas might have some shifts in behavior. Another typical situation is when users change their behavior in summer. In this section, we’ll try to take into account these seasonal effects.</p>
<p>So we want to predict DAU for the 1 year ahead starting from November 2022. Instead of using a single transition matrix <img src="https://latex.codecogs.com/png.latex?M_%7Bbase%7D"> which is calculated for the last 8 months before the prediction start (as an optimal transitions period derived from the previous section, labeled as <code>last_240d</code> option), we’ll consider a mixture of this matrix and a seasonal one <img src="https://latex.codecogs.com/png.latex?M_%7Bseasonal%7D">. The latter is calculated on monthly basis lagging 1 year behind. For example, to predict DAU for November 2022 we define <img src="https://latex.codecogs.com/png.latex?M_%7Bseasonal%7D"> as the transition matrix for November 2021. Then we shift the prediction horizon to December 2022 and calculate <img src="https://latex.codecogs.com/png.latex?M_%7Bseasonal%7D"> for December 2021, etc.</p>
<p>In order to mix <img src="https://latex.codecogs.com/png.latex?M_%7Bbase%7D"> and <img src="https://latex.codecogs.com/png.latex?M_%7Bseasonal%7D"> we define the following two options.</p>
<ul>
<li><code>seasonal_0.3</code>: <img src="https://latex.codecogs.com/png.latex?M%20=%200.3%20%5Ccdot%20M_%7Bseasonal%7D%20+%200.7%20%5Ccdot%20M_%7Bbase%7D">. 0.3 weight was chosen as a local minimum after some experiments.</li>
<li><code>smoothing</code>: <img src="https://latex.codecogs.com/png.latex?M%20=%20%5Cfrac%7Bi%7D%7BN%20-%201%7D%20M_%7Bseasonal%7D%20+%20(1%20-%20%5Cfrac%7Bi%7D%7BN%20-%201%7D)%20M_%7Bbase%7D"> where <img src="https://latex.codecogs.com/png.latex?N"> is the number of months within the predicting period, <img src="https://latex.codecogs.com/png.latex?i%20=%200,%20%5Cldots,%20N%20-%201"> – the month index. The idea of this configuration is to gradually switch from the most recent transition matrix <img src="https://latex.codecogs.com/png.latex?M_%7Bbase%7D"> to seasonal ones as the prediction month moves forward from the prediction start.</li>
</ul>
<div id="6bf81796" class="cell" data-execution_count="29">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame()</span>
<span id="cb36-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> transition_period <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'last_240d'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seasonal_0.3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'smoothing'</span>]:</span>
<span id="cb36-3">    result[transition_period] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prediction(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-11-01'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-10-31'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>, transition_period)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>]</span>
<span id="cb36-4">result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>]</span>
<span id="cb36-5">result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb36-6">result.plot(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAU prediction by different transition matrices'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wowone.github.io/posts/2024-11-01_dau_prediction/dau_prediction_files/figure-html/cell-30-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="fe73fae5" class="cell" data-execution_count="30">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">mape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame()</span>
<span id="cb37-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> result.columns:</span>
<span id="cb37-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>:</span>
<span id="cb37-4">        mape.loc[col, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mape'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean_absolute_percentage_error(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>], result[col])</span>
<span id="cb37-5">mape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="30">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mape</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">last_240d</td>
<td>0.080804</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">seasonal_0.3</td>
<td>0.077545</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">smoothing</td>
<td>0.097802</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>According to the MAPE errors, <code>seasonal_0.3</code> configuration provides the best results. Interestingly, <code>smoothing</code> approach has appeared to be even worse than the <code>last_240d</code>. From the diagram above we see that all three models start to underestimate the DAU values from July 2023, especially the <code>smoothing</code> model. It seems that the new users who started appearing from July 2023 are more engaged than the users from 2022. Probably, the app was improved sufficiently or the marketing team did a great job. As a result, the <code>smoothing</code> model that much relies on the outdated transitions data from July 2022 - October 2022 fails more than the other models.</p>
</section>
<section id="final-solution" class="level3">
<h3 class="anchored" data-anchor-id="final-solution">4.5 Final solution</h3>
<p>To sum things up, let’s make a final prediction for the 2024 year. We use the <code>seasonal_0.3</code> configuration and the predicted values for new users.</p>
<div id="8fb64c7e" class="cell" data-execution_count="31">
<details class="code-fold">
<summary>Toggle the code</summary>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">dau_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_prediction(PREDICTION_START, PREDICTION_END, new_users_mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'predict'</span>, transition_period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seasonal_0.3'</span>)</span>
<span id="cb38-2">dau_true[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>].plot(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>)</span>
<span id="cb38-3">dau_pred[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dau'</span>].plot(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'seasonal_0.3'</span>)</span>
<span id="cb38-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAU, historical &amp; predicted'</span>)</span>
<span id="cb38-5">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://wowone.github.io/posts/2024-11-01_dau_prediction/dau_prediction_files/figure-html/cell-32-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="discussion" class="level2">
<h2 class="anchored" data-anchor-id="discussion">5. Discussion</h2>
<p>In the section 4 we studied the model performance from the prediction accuracy perspective. Now let’s discuss the model from the practical point of view. We compare it with the baseline model (see the section 4.1).</p>
<p>Besides poor accuracy, predicting DAU as a time-series makes this approach very stiff. The only thing we can control here is the historical data. In practice, when making plans for the next year we have some certain expectations about the future. For example,</p>
<ul>
<li>the marketing team is going to launch some new more effective campaings,</li>
<li>the activation team is planning to improve the onboarding process,</li>
<li>the product team will release some new features that would engage and retain users more.</li>
</ul>
<p>Our model can take into account such expectations. For the examples above we can adjust the new users prediction, the <code>new</code>→<code>current</code> and the <code>current</code>→<code>current</code> conversion rates respectively. As a result we can get a prediction that is doesn’t match with the past data but would be more realistic. This model’s property is not just flexible – it’s interpretable. You can easily discuss all these adjustments with the stakeholders, and they can understand how the prediction works.</p>
<p>Another advantage of the model is that it doesn’t require to predict whether a user will be active on a certain day. Sometimes binary classifiers are used for this purpose. The downside of this approach is that we need to apply such a classifier to each user including all the dormant users and each day. This is a tremedous computational cost. Unlike this, the Markov model requires only the initial amount of states (<code>state0</code>). Moreover, such classiffiers are often black-box models: they are poorly interpretable and hard to adjust.</p>
<p>The Markov model also has some limitations. As we already have seen, it’s sensitive to the new users prediction. It’s easy to totally ruin the prediction by the wrong new users amount. Another problem is that the Markov model is memoryless meaning that it doesn’t take into account the user’s history. For example, it doesn’t distinguish whether a <code>current</code> user is a newbie, experienced, or just <code>reactivated</code>/<code>resurrected</code>. The retention rate of these user types should be certainly different. Also, as we discussed earlier the user bahavior might be of different nature depending on the season, marketing sources, countries, etc. So far our model is not able to capture these differences. However, this might be a subject for further research.</p>


</section>

 ]]></description>
  <category>product analytics</category>
  <category>predictive analytics</category>
  <guid>https://wowone.github.io/posts/2024-11-01_dau_prediction/dau_prediction.html</guid>
  <pubDate>Sun, 10 Nov 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Sequen-C: A Multilevel Overview of Temporal Event Sequences</title>
  <link>https://wowone.github.io/posts/2024-11-05_Sequen-C/</link>
  <description><![CDATA[ 





<p>My name is Vladimir Kukushkin. I’ve been working as a data analyst/data scientist for more than 10 years. A couple of years ago I heavily shifted to quantitative UX research area which turned into my passion. While eagerly trying to find some sources to read regarding this topic, I realized that there are not so many of them. That’s why I decided to write a series of posts towards quantitative UX research. Basically, it will be reviews of papers, books and other publications that I find insightful. I’d be happy to find here enthusiasts who are also interested in this domain.</p>
<p>Let me start our journal club with the most impressive paper related to clickstream visualizations I’ve ever read: <a href="https://arxiv.org/abs/2108.03043">Sequen-C: A Multilevel Overview of Temporal Event Sequences</a> by Jessica Magallanes, Tony Stone, Paul D. Morris, Suzanne Mason, Steven Wood, and Maria-Cruz Villa-Uriol.</p>
<p>The authors address two very common issues that any quantitative UX researcher encounters:</p>
<ol type="1">
<li>Clickstream data often comprises multiple behavioral paths. Treating and visualizing it as a whole is incorrect and often leads to contradictory results.</li>
<li>Despite the fact that users follow certain (latent) scenarios, the ways they perform particular steps vary greatly: they may repeat the same steps multiple times, deviate from a scenario, or switch it. When analyzing such data, it’s hard to understand the patterns of repetition, deviation, and switching.</li>
</ol>
<p>In the paper, the authors describe an interactive visualization tool that tackles both these issues and provides a methodology they call Align-Score-Simplify.</p>
<section id="methodology" class="level2">
<h2 class="anchored" data-anchor-id="methodology">Methodology</h2>
<p>The first problem is addressed by applying (agglomerative) clustering. I’ll explain further why they chose this algorithm. The second problem is solved using their framework called Align-Score-Simplify.</p>
<section id="align" class="level3">
<h3 class="anchored" data-anchor-id="align">Align</h3>
<p>This part is the most elegant, amazing, and surprizing in the whole paper. They apply the <a href="https://en.wikipedia.org/wiki/Multiple_sequence_alignment">MSA algorithm (Multiple Sequence Alignment)</a> stemming from bioinformatics. Originally, it was created to align amino acids or nucleotides in DNA sequences to identify common subsequences across DNAs belonging to multiple species. But this is exactly one of the goals we pursue in clickstream data analysis. Once we align user trajectories in similar way, we understand what events are common for the most users at some specific steps.</p>
<figure class="figure">
<center>
<img src="https://wowone.github.io/posts/2024-11-05_Sequen-C/MSA_example.png" height="100" class="figure-img">
<figcaption>
Inserting <code>-</code> as gaps to align events in sequences. The coloured events might be considered as common at some steps. The others are considered as noise.
</figcaption>
</center>
</figure>
</section>
<section id="score" class="level3">
<h3 class="anchored" data-anchor-id="score">Score</h3>
<p>Let <img src="https://latex.codecogs.com/png.latex?%5Clambda"> be the output of the MSA algorithm applied to a set of unique sequences <img src="https://latex.codecogs.com/png.latex?S"> (the frequency of each path is denoted as <img src="https://latex.codecogs.com/png.latex?P_i">). They calculate the information score <img src="https://latex.codecogs.com/png.latex?I_j"> for each column <img src="https://latex.codecogs.com/png.latex?j"> in <img src="https://latex.codecogs.com/png.latex?%5Clambda"> as a measure of the column’s impurity, somewhat similar to entropy but with some additional penalty for the high amount of gaps:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AI_j%20=%201%20-%20%5Cfrac%7BE_j%7D%7B%5Clog_2(%7CA%7C%20+%201)%7D,%20%5C;%5C;%5C;%5C;%20E_j%20=%20%5Csum_%7Ba%5Cin%20A_j%5Ccup%5C%7B-%5C%7D%7D%0A%5Cbegin%7Bcases%7D%0A-P_a%5Clog_2%5Cleft(%5Cfrac%7BP_a%7D%7BG_j%7D%5Cright)%5C,%20&amp;%20%5Ctext%7Bif%20%7D%20a%20=%20%5Ctext%7B'-'%7D%5C%5C%0A-P_a%5Clog_2%20P_a,%20&amp;%20%5Ctext%7Botherwise%7D,%0A%5Cend%7Bcases%7D%0A"></p>
<p>where</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?A"> – the set of unique events in <img src="https://latex.codecogs.com/png.latex?S">,</li>
<li><img src="https://latex.codecogs.com/png.latex?A_j"> – the set of unique events in column <img src="https://latex.codecogs.com/png.latex?j">,</li>
<li><img src="https://latex.codecogs.com/png.latex?P_a"> – the probability of the event <img src="https://latex.codecogs.com/png.latex?a"> in column <img src="https://latex.codecogs.com/png.latex?j">,</li>
<li><img src="https://latex.codecogs.com/png.latex?G_j"> – is the count of gaps in column <img src="https://latex.codecogs.com/png.latex?j">.</li>
</ul>
</section>
<section id="simplify" class="level3">
<h3 class="anchored" data-anchor-id="simplify">Simplify</h3>
<p>Once the <img src="https://latex.codecogs.com/png.latex?I_j"> score is calculated for each column <img src="https://latex.codecogs.com/png.latex?j">, we can treat each column that exceeds a certain threshold <img src="https://latex.codecogs.com/png.latex?I_%5Ctau"> as an event that prevails in this column, while all other columns might be collapsed as noise. As a result, we get a new table <img src="https://latex.codecogs.com/png.latex?%5Calpha"> that simplifies the initial clickstream <img src="https://latex.codecogs.com/png.latex?S">, as shown in the image below.</p>
<figure class="figure">
<center>
<img src="https://wowone.github.io/posts/2024-11-05_Sequen-C/simplified_clickstream.png" height="220" class="figure-img">
<figcaption>
The outline of the Align-Score-Simplify workflow.
</figcaption>
</center>
</figure>
<p>Finally, we can granulate our clickstream representation using two axes:</p>
<ol type="1">
<li>We can consider different clusters of the agglomerative clustering output tree <img src="https://latex.codecogs.com/png.latex?T">. Now it’s clear why they preferred this clustering algorithm instead of, say, K-Means. Considering different levels of <img src="https://latex.codecogs.com/png.latex?T">, we obtain more/less homogeneous clusters. More homogeneous clusters provide better and clearer output of the MSA algorithm.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctau">. By varying <img src="https://latex.codecogs.com/png.latex?%5Ctau">, we can make the sequence visualization more/less coarse.</li>
</ol>
<p>As a result, we get the interface like this:</p>
<figure class="figure">
<center>
<img src="https://wowone.github.io/posts/2024-11-05_Sequen-C/framework_outline.png" height="500" class="figure-img">
<figcaption>
The outline of the whole framework. (A) Building aggregate tree <img src="https://latex.codecogs.com/png.latex?T"> for input unique sequences <img src="https://latex.codecogs.com/png.latex?S%20=%20%5C%7Bs_1,%20...s_6%5C%7D">. (B) Each node in <img src="https://latex.codecogs.com/png.latex?T"> has an alignment matrix <img src="https://latex.codecogs.com/png.latex?%5Clambda"> for its child sequences, a row-wise probabilities vector <img src="https://latex.codecogs.com/png.latex?P">, and a column-wise information score vector <img src="https://latex.codecogs.com/png.latex?I">. Two or more consecutive columns in <img src="https://latex.codecogs.com/png.latex?%5Clambda"> with <img src="https://latex.codecogs.com/png.latex?I_j%20%3C%200.8"> are not coloured. (C) Multilevel overviews for a range of number of clusters <img src="https://latex.codecogs.com/png.latex?k"> retrieved from <img src="https://latex.codecogs.com/png.latex?T">, where black blocks represent merged columns. Image by authors.
</figcaption>
</center>
</figure>
<p>In the following sections, the authors describe the GUI of a more complex tool developed as an application for a couple of particular datasets from the public health domain. I won’t talk about it here since its underlying idea is the same, while the interface is more sophisticated and includes some information about events distribution, unique sequence view, and individual sequence view.</p>
<p>The datasets are more related to process mining, so the event cardinality is low. This is much lower than what happens in product analytics. The paths are very structured with few deviations from the main flow. That’s why I’m quite skeptical about applying this framework to product analytics clickstream data. Additionally, it’s not clear how fast MSA would work with clickstream data.</p>
<p>Anyway, the idea of the paper and the framework are super interesting to me. It would be great to implement such a tool someday.</p>


</section>
</section>

 ]]></description>
  <category>journalclub</category>
  <category>clickstream visualizations</category>
  <guid>https://wowone.github.io/posts/2024-11-05_Sequen-C/</guid>
  <pubDate>Mon, 04 Nov 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Welcome to Journal Papers Product Minds Club</title>
  <link>https://wowone.github.io/posts/2024-10-22_Welcome/</link>
  <description><![CDATA[ 





<div class="float-figure">
<p><img src="https://wowone.github.io/posts/2024-10-22_Welcome/Sgt_Peppers_Lonely_Hearts_Club_Band.jpg" class="img-fluid"></p>
</div>
<p>I’ve been working as a data scientist / data analyst over 10 years. The slash signifies that I typically work at the intersection of product analytics and data science, tackling problems that require advanced techniques like predictive analytics, causal inference, and building statistical models. My specialization is in user behavior analysis a.k.a. quantitative UX research or, more broadly, in analyzing sequential data. In addition to working as a data analyst, I played a key role in developing an open-source Python library <a href="https://doc.retentioneering.com/stable/doc/">retentioneering</a>, which aims to simplify research in this area.</p>
<p>In my view, this field deserves much more attention than it currently receives. While these analyses are more complex than traditional funnel or cohort analysis, quantitative UX provides a deeper understanding of how users interact with your product. It reveals insights such as:</p>
<ul>
<li>What drives users to churn, make purchases, subscribe, etc. (causal inference),</li>
<li>What segments users form (cluster analysis),</li>
<li>What caused unexpected behavior in dashboard charts (root cause analysis)</li>
<li>What distinguishes one user group from another, e.g.&nbsp;mobile VS desktop, AB-experiment groups, before and after release.</li>
</ul>
<p>These research questions are not an empty sound. Finding the answers helps identify product bottlenecks, understand what drives user satisfaction or dissatisfaction, and ultimately improve your product. This is the core purpose of product analytics.</p>
<p>Given the lack of substantial literature on the subject, here I aim to collect and review papers, books, and publications that I find insightful.</p>
<p>Like how Sgt.&nbsp;Pepper’s Lonely Hearts Club Band expanded horizons in music, I hope this journal club will attract data analysts and data scientists eager to broaden their understanding of these topics. The term “club” in the title reflects my wish to engage with enthusiasts and foster discussions around these fascinating subjects. <em> <br><br>♫ Music playing ♫<br> We’re Sgt.&nbsp;Pepper’s Lonely Hearts Club Band<br> We hope you will enjoy the show<br> </em></p>



 ]]></description>
  <category>news</category>
  <guid>https://wowone.github.io/posts/2024-10-22_Welcome/</guid>
  <pubDate>Mon, 21 Oct 2024 22:00:00 GMT</pubDate>
  <media:content url="https://wowone.github.io/posts/2024-10-22_Welcome/Sgt_Peppers_Lonely_Hearts_Club_Band.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
